해야할 것

1. 자동차 속도에 따라서 메시지 간격 변하는 그래프 구현(3/19-3/20)
 - 영준 '패킷 생성 로직' 받기
 - 논문에 나온 1/x 그래프 이용 
    => 논문 1번 식 이용하면 될 것 같다
 1) 영준논문 참고문헌 8의 2번 읽어보기
  - CAMs triggering conditions(distance 4m이상 차이, speed 차이가 0.5m/s이상 차이, heading 4도 이상 차이, CAM 생성된 지 1초 이상 차이)
  - vehicle이 이런 condition을 every T_CheckCamGen마다 체크한다. 이는 100ms이하이다. 따라서 1초에 최소 10번은 체크함
  - CAM message에는 ITS PDU header와 containers가 있다. 
    mandatory는 basic container(전송차량의 type, position과 같은 정보), 
    high frequency container(전송차량의 acceleration, heading, speed같은 highly dynamic information)이 있고 
    optional은 low frequency container(status of ther exterior lights, path history같은 static and dynamic information), 
    special vehicle container(public transport, emergency vehicles, dangerous goods전송차량)가 있다.
  - CAM size는 optional containers과 header의 data elements(DE)에 의해 결정된다.
    ITS PDU header와 basic container는 madatory and fixed size이지만 16 DE 중 7이 optional.
    container size는 variable하며 manufacturer와 context condition에 달려 있다.
    low frequency container는 PathHistory와 같은 3 mandatory DE를 가지고 있다.
    PathHistory size는 not fixed이다. 0에서 40 path entries를 사용 가능.
  - Security certificates는 전송 전에 CAM에 attached될 수 있다. 
    새로운 neighboring vehicle이 감지되거나 초당 1회에, 또는 RSU의 요청이 있을 때 on-demand로도 전송 가능하다.
  - 결국 CAMs의 size는 200-800bytes 사이로 변할 수 있다. 
    이런 변화는 V2X performance를 정확히 추정하는 데에 반드시 고려되어야 한다.
 2) v5.4 generationPeriodfromSpeed
  - 그냥 속도 입력 받아서 있는 그대로 두면 된다. timeNextPacket에 generationInterval이 바로 적용된다.
  - 5.4v는 11p에서만 cam interval이 가능하게 된 시뮬레이터라서 이후에도 11p에 이어지는 부분을 적용해야 하는가에 대한 고민 때문에 
    확실한 부분만 5.0v로 가져가면 나아질까 생각했다. 하지만 어차피 생성된 패킷에 대한 처리 방식은 달라지는 게 없고 
    오직 패킷 생성 방식만 달라진 것이기 때문에 그렇게까지 고민할 필요는 없어 보인다.
    뒤에 RRI가 걱정되기도 해서 새로 시뮬레이터를 뜯어봐야 한다는 리스크도 좀 줄일 수 없을까 했는데 
    영준이가 이 정도는 해야 한다고 하니까 이대로 용기 내어 가 보자.

2. 나도 같은 속도 유지했을 때로 실험하면 되는데 이때 메시지가 한 간격밖에 안 나옴(3/21-3/24)
 - 매번 속도를 바꿔가면서 실험을 해야 할 것 같음
 - sci에 예약하기 위한 필드 RRI를 현재 속도에 따라 다음 메시지 언제 나오는 지 알고 예약
   => aperiodic한 것은 속도 바뀌면 나타나게 되는 것.
        tb가 딱히 있는 게 아니라 Tg랑 일치가 되어 버림.        
        근데 이게 일치되면 reallocation이 local minima가 된다는 게 bazzi 논문에 나와 있음
        이렇게 하면 Tb가 Tg와 달랐던 것과 달리 performance가 안 나빠진다는 기대를 통해 더 나은 솔루션을 제시 할 수 있을 것이다.
        따라서 위와 같은 셋팅을 해 두고 reallocation이 속도에 따라 어떻게 나타나는 지 비교해 볼 필요가 있다.
 1) v5.4 BRreassignment3GPPmode4 이해하기
  - 그냥 RRI는 packetInterval로 정해지는 거 아닌가? 이걸 따로 설정해 줘야 하는 건가?
    속도가 일정할 땐 RC값을 그대로 가게 하다가 속도 변화로 인해 generationInterval이 변하면 RC값을 다시 정해주긴 해야 할 것 같다.
  - nextAllcate가 100ms인 NbeaconsT 이후에 되고 있다. 이게 RRI 역할을 하고 있는 것 같다.
    NbeaconsT를 interval에 따라서 바꿔줘야 할 것 같다. 일단 interval과 RRI 사이의 관계를 보고 조절해 보자.
    interval은 timeEvent가 timeNextPacket(idEvent)일 때의 주기를 만들어 주는 것이고, 
    SPS는 mainLTEsubframeEnds 안에 들어있는 함수로서, 그 안에서 100ms 단위로 allocate 해 주면서 RC값 감소시키고 다 감소되면 reselection해 준다.
  - 이게 아니라 knownUsedMatrix가 elseif를 추가하면 RRI를 나타낼 수 있다고 한다. 정말???????!!???
 2) v5.0 knownUsedmatrix쪽 고쳐서 RRI
  - generationInterval 정해지면 RRP 실수인 거 초기화시켜주기..
  - RRI가 정수형의 배수여야 index에 넣는데.. 이게 실수라서 어떻게 하지? 
    영준이가 RRI를 0.1부터 1까지 0.1단위로 하라고 했다. 교수님도 이렇게 하라고 하심
 3) RC counter가 마음대로 떨어지지 않는 지 확인(3/26, 3/28-3/29)
  - timeNextPacket이여도 RRP가 0.1s보다 크면 안 내려가야 하는 걸 말하는 듯
  - tx는 걸렀는데, rx는 받았다고 해 놓은 상태니까 tx의 RC값을 RRP가 1이면 냅두고 2면 1을 더해주면 될 것 같다.
  - RC값 자체를 건드리는 것보다 inTheLastSubframe을 지정하지 않는 방향으로 가라고 해줌
  - 100ms 단위일 땐 모든 차량이 100ms 안에 한 번씩 전송하니까 이 전송들이 다 끝나고 나면 한번에 RC값을 내려줬다.
     이게 언제 뛰어 넘어야 한다고 기준을 잡아줘야 할 것 같은데.. 
     전송할 때 RRP 값을 따로 저장해 두고 subframe이 끝날 때마다 RRP가 1이 아니면 RRP를 떨어뜨리고, 
     1이면 RC를 떨어뜨리는 식으로 가면 되지 않을까.
     일딴 한쪽을 IDvehicle이 될 것이고, 다른 한 쪽은 RRP를 나타내게 될 것이다.
     이건 굳이 RRPMatrix를 쓰지 않아도 속도에 따라서 알 수 있는 값이다.    
 4) aperiodic으로 보낼 때가 아닌데 BRid 같다고 transmitting 하는 지 확인(3/29-3/30)
  - transmittingID는 subframeStarts.m에서 정해진다. 이 때도 inTheLastSubframe에서 했던 것처럼 해 주면 될 것 같다.
  - 1ms마다 RRP를 내려줄 필요는 없다. 100ms마다 내려야 RRI라는 interval이 생긴다.
    그래서 전송이 있을 때 CountRRI 또는 RRIcount에서 하나씩 빼서 1이 되면 그제서야 할 수 있게 만들면 될 것 같다.
  - 근데 timeNextPacket이 더 먼저 있어서 2ms에 RC값을 먼저 빼고 48ms에 transmittingID가 생성되면 어떡함?? 
    전송 후에 RC값이 떨어져야 하는 거 아닌가? 그냥 100ms 안에만 이루어지면 되는 건가????????????????????
   --> lte에서도 패킷 생성될 때 떨어지는 거라서 괜찮다

3. 일정한 주행 속도를 4lane에 다르게 설정하기(3/25-3/26, 3/30, 4/1)
 1) 고속도로의 최고 속도는 편도 1차로 시속 80㎞, 편도 2차로 이상 시속 100㎞나 시속 110㎞ 등 세 가지다.
    (http://www.hani.co.kr/arti/economy/economy_general/684904.html#csidx035795a9667b6d3a3ebb412f77f0632) 
   - 고속도로라고 이 속도들을 다 맞춰서 달리지는 않는다. 정체 구간은 38km/h인 곳도 있다. 
     이렇게 차이가 큰 건 4번에서 정체 구간인 경우를 잡고 실험해 보면 좋겠다.
    --> lane은 4+4로 해서 congestion control도 지켜볼 수 있게 하기
 2) 70km/h일 땐 generationInterval 0.2s, 80km/h일 때 generationInterval 0.2s,
     90km/h일 때 generationInterval 0.1s, 100km/h일 때 generationInterval 0.1s, 110km/h 일 때 generationInterval 0.1s
     일단 무난하게 [80,90,100,110]으로 해 보고 잘 되면 [70,80,90,100]으로 또 돌려보자
    --> 교수님이 0.1, 0.2, 0.3, 0.4s로 나오게 해 보라고 하셨다.
 3) 그림으로 띄워 보니 위에 4 lane은 왼쪽으로, 아래 4 lane은 오른쪽으로 감
   - 근데 한 lane에 있는 차량의 갯수가 일정하지 않아서 임의로 지정을 해 줘야 하지 않을까 싶다.
     밀도는 200대/km 로 시작해서 한 lane 당 50대씩 있다고 생각하면 되겠다.
    --> 어차피 랜덤하게 뿌려주는 PPP니까 괜찮다고 하셨다. 나는 highway scenario라서 PPP가 아닐 것 같은데..
   - 차량 위치를 정하고 lane에 따라서 속도를 지정해야 할 것 같다. 
     왼쪽부터 1차선-4차선까지 90km/h, 72km/h, 48km/h, 36km/h
 4) typeOfScenario를 PPP로 하냐 Highway scenario로 하냐 결정하기
   - 처음에 차를 뿌려놓는 걸 포아송으로 뿌려 놓는다는 표현이 있어서 
     Highway scenario가 아니라 PPP로 해야 하는 건가 싶었는데 그렇게 중요한 건 아닌 것 같다. 
     두 시나리오 모두 x,y가 랜덤으로 흩뿌려지기 때문에 큰 문제가 되지 않아 보인다.
     굳이 하나를 정한다면 Bazzi 논문과 비슷하게 Highway scenario로 하는 게 좋을 것 같다.

4. 주행속도를 적절히 셋팅해서 이게 바꾼 sps랑 원래 sps에서 performance가 좋아지는 지 확인해야 할 것 같다.
 1) PRR 비교하기(4/2)
   --> density에 따른 packet reception rate --> TxRx distance에 따른 PRR을 보라고 하심
  - printPRRmap은 urban scenario에서만 가능한 것 같다. 그럼 직접 packet reception rate를 구해야 할 것 같다.
  - printPRRmap에서 뭐 따올 것 없는 지 봤는데 이건 바로 이미지파일로 뽑는 것 같다.
    하지만 굳이 그림을 만드려고 하지 않아도 각각의 x,y값만 알면 plot으로 띄울 수 있다.
    직접 하는 게 좋을 것 같다.
  - 지현코드설명에선 mainLTEV2V.m 아랫부분에 PRRForDistance = numOfRx ./ numOfTx;로 짜고 로그를 다음과 같이 남겼다.
    outFile = fopen(sprintf('./ITTpercent_%d/PRR_Raw%d_VErange%d_rho%d_MCS%d_%f_ITTpercent_%d_data', simParams.ITTpercent, phyParams.Raw, phyParams.rangeforVehicleDensity, simParams.rho, phyParams.MCS, phyParams.smoothingFactorFor...
    for i = 1:length(PRRForDistance)
	fprintf(outFile, '%f\t', PRRForDistance(i));
    end
    fprintf(outFile, '\n');
    fclose(outFile);
  - PRR은 '수신한 패킷 수를 송신한 패킷 수로 나눈 비율'인데, 
    송신을 하면 neighborsID에 쏘고, SINR이 threshold보다 낮은 것은 수신 실패한 것이다.
    SINR이 낮은 것 중에서도 Raw보다 멀리 있는 것들 역시 수신 실패이다.
    그런데 이것들을 제외해도 Raw보다 멀리 있는데 SINR이 threshold보다 높은 게 있다.
    물론 시뮬레이터에서는 SINR이 threshold보다 높아도 Raw보다 멀리 있으면 correctly transmitted beacon이 아니라고 친다.
    그럼 분모와 분자를 Raw 안에 있는 것들로 구성해야 하는 건가? 그렇다면 송신자로부터 150m까지밖에 못 구하게 되는데,
    영준 논문에선 400m까지 tx-rx distance를 했다면 Raw를 400까지 늘려주어야 하나? 
   --> 맞는 것 같다. Raw는 PRR에서 target distance를 정할 수 있게 된다.
  - 기준 단말을 놓고 neighborsID를 distance별로 sort해서 그 순서대로 PRR을 정렬해야 하지 않을까?
    distance는 positionManagement.distanceReal에서 sort하면 될 것 같다.
    transmittingID 189번의 neighborsID 갯수는 53인데, 이 중 8개가 수신 실패가 일어났다. 따라서 수신 성공한 ID 갯수는 45개다.
    transmittingID 196번의 neighborsID 갯수는 60인데, 이 중 16개가 수신 실패가 일어났다. 따라서 수신 성공한 ID 갯수는 44개다.
    189와 196이 동시에 전송되었으므로 이 때 총 송신 비콘 갯수는 NtxBeacons = 113, 총 수신 비콘 갯수는  89이다.
   --> PRR을 바로 구할 수 있는 함수가 있다고 한다. 여기에 edge effect를 뺀다고 추가해서 구하면 된다고 함
        가장 아래에 countDistanceDetails.m이 있는데 이거인 것 같다.
   --> edge effect를 roadLength가 3000이면 앞뒤로 1000, 2000이면 앞뒤로 500-600m 정도 하기

  - transmittingID가 edge effect가 일어날 수 있는 곳에 있으면 PRR이 무슨 의미가 있담?

  - 기존 SPS에서 차 배치 및 속도 셋팅 후 PRR뽑기
    
 2) PIR 비교하기(4/3)
  - packet inter-reception time을 의미, printUpdateDelay로 이용하는 것 같다. 기본이 false로 되어 있으므로 true로 만들어 주면 뭔가 나올 듯
    연속적으로 비콘 수신을 성공했을 때의 시간을 말하는 듯

  - TxRx distance에 따른 PIR

 3) no show 문제를 극대화해서 보려면 200vehicles/km부터 그 이상을 봐야 할 듯
 4) 저번에 CBR얘기가 나왔는데 이것도 같이 보면 좋을 듯

5. 한 lane 내에서도 속도를 일정하게 하지 말고, 그 일정한 속도를 평균으로 하는 전후 값들을 지정해 주어 변동을 주었을 때도 성능 향상 있는 지 확인


6. 논문 읽는 법
 1) motivation
 2) problem definition
 3) solution approach
 4) evaluation
 5) conclusion, critic